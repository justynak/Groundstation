INSTALACJA:

Potrzebne biblioteki i soft:
*qt4.8 + qtcreator
*qledplugin - http://qt-apps.org/content/show.php?content=72482, wersja 0.6.2
	instalacja: ściągnąć, potem w terminalu: rozpakować->qmake->make->sudo make install
*opencv - z ros będzie ok.

First launch:
*niestety, ale trzeba będzie edytować plik .pro . Jak już było w mailu, qmake jest głupiutki i najlepiej biblioteki dodawać za pomocą qtcreatora.

step-by-step:
1) Włączyć QtCreator i otworzyć projekt, wejść w plik groundstation.pro
2) usunąć ostatnie linie: LIBS, INCLUDEPATH i DEPENDPATH - są razem zebrane
3) z lewej strony drzewko projektu->prawy myszy->dodaj nową bibliotekę
4) dodaj bibliotekę zewnętrzną
5) plik z biblioteką -> folder, w którym znajduje się libopencv_core.so (libqledplugin.so)
6) folder z plikami nagłówkowymi ->folder /opt/ros/fuerte/include/opencv2 (/usr/lib/qt4/examples/designer/qledplugin)
7) wybrać tick 'linux', dalej, dalej
8) w pliku .pro pojawią się linie z dependpath, includepath i libs
9) dla opencv: LIBS+= -L/ścieżka/ -lopencv_core -lopencv_highgui -lopencv_imgproc
10) dodać jeszcze folder /opt/ros/fuerte/include/opencv jako includepath i dependpath (copy-paste linii includepath i dependpath dla opencv2 i wykasować 2 na końcu)

trzeba tak zrobić, bo qmake musi mieć ścieżkę z folderu, w którym się buduje projekt. W ten sposób uniknie się błędów w ilości kropek i ukośników.

*zbudować projekt-> qmake, zbuduj, uruchom
*jak coś krzyczy w stylu 'library not found' - sprawdzić ścieżki

W konsolce wyświetla się błąd:
VIDIOC_QUERYMENU: Invalid argument
należy to zignorować, bo opencv się nieco gryzie z qt, blablabla

Przy zamykaniu aplikacji może w konsoli wystąpić "Niespodziewane zakończenie programu" - gdzieś jest jakiś segfault, ale on tylko występuje przy zamykaniu.

EDYCJA RAMEK:

wszystkie ramki są zaimplementowane w pliku Robot.cpp, konkretnie linie 72-700 (co może ulec modyfikacji)
Każda ramka ma taki wygląd, jak w pliku HUSAR_Opis_komunikacji.pdf.
Ramki są oznaczone, argumenty są w miarę możliwości opisane.
Typowy element ramki:
block.append((QByteArray::number(0, 10)));

funkcja QByteArray::number() robi z int *char, drugi argument (tu 10) to format - 2 - podstawa dwójkowa, 8- ósemkowa, 10-dziesiątki, itp. też jak najbardziej do edycji.
Nie usuwajcie tej funkcji, bo kompilator będzie krzyczał.


OBRAZ Z KAMERY
jeżeli obraz będzie odwrócony, należy zakomentować linię: cv::flip(mat, mat, 0)


Jak by co, to dzwońcie albo piszcie, to będziemy kombinować.






	
